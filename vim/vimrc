set shell=/bin/bash
set encoding=utf-8
filetype off
set mouse=a
set ttymouse=xterm
let mapleader=" "


" terminal vim sucks at pasting; press F2 to toggle making it better
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

call plug#begin('~/.vim/plugged')
Plug 'jremmen/vim-ripgrep'
Plug 'scrooloose/nerdtree'
Plug 'tomtom/tlib_vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-git'
Plug 'kchmck/vim-coffee-script'
Plug 'kien/ctrlp.vim'
" Plug 'tmhedberg/matchit' # FIXME ðŸ˜ž
Plug 'terryma/vim-multiple-cursors'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
Plug 'vim-scripts/slimv.vim'
Plug 'vim-scripts/scratch.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'spf13/vim-autoclose'
Plug 'tpope/vim-endwise'
Plug 'vim-scripts/vim-pencil'
Plug 'junegunn/goyo.vim'

let g:goyo_width = '80'
let g:goyo_height = '95%'

Plug 'junegunn/limelight.vim'

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

Plug 'pangloss/vim-javascript'
let g:javascript_plugin_flow = 1

Plug 'ngmy/vim-rubocop'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'chase/vim-ansible-yaml'
Plug 'sbdchd/neoformat'
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'

let g:mix_format_on_save = 1

Plug 'neomake/neomake'
Plug 'wincent/terminus'
Plug 'jparise/vim-graphql'
Plug 'chriskempson/base16-vim'
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" React code snippets
Plug 'chadoh/vim-react-snippets'
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips/"

Plug 'styled-components/vim-styled-components'
Plug 'hail2u/vim-css3-syntax'
Plug 'janko-m/vim-test'
nmap <silent> t<C-n> :w<cr>\|:TestNearest<CR>
nmap <silent> t<C-f> :w<cr>\|:TestFile<CR>
nmap <silent> t<C-s> :w<cr>\|:TestSuite<CR>
nmap <silent> t<C-l> :w<cr>\|:TestLast<CR>
nmap <silent> t<C-g> :w<cr>\|:TestVisit<CR>

Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key='<c-t>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

Plug 'w0rp/ale'
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 0
let g:ale_lint_on_enter = 0
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\}
nnoremap <leader>d :ALEGoToDefinition<cr>
nnoremap <silent> <leader>e :ALENextWrap<cr>
nnoremap <silent> <leader>E :ALEPreviousWrap<cr>

Plug 'itchyny/lightline.vim'
set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'wombat' }

Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
hi jsxAttrib cterm=italic

call plug#end()

filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

" Don't show current mode b/c we have airline
" set noshowmode
" set laststatus=2
nnoremap <leader>s :set laststatus=0 showmode<cr>
nnoremap <leader>S :set laststatus=2 noshowmode<cr>

set showmatch
set showcmd                     " display incomplete commands
set ruler
set relativenumber
set number
set wildmenu
set wildmode=longest,list
set visualbell
set splitright
set splitbelow

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent

" Show some whitespace chars
set list
set listchars=tab:â–¸Â·,trail:Â·

nnoremap <leader><cr> :set wrap! linebreak!<cr>

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Set ex history higher
set history=1000

" Preseve undo across sessions
if exists("&undodir")
" set undodir=~/.vim-tmp/undo/
" set undofile
endif

" Resize splits when the window is resized
au VimResized * :wincmd =

" Remove trailing whitespace from files on save
" (except files with "b:noStripWhitespace=1" (only markdown by default))
fun! StripTrailingWhitespace()
" Don't strip on these filetypes
if &ft =~ 'markdown'
    return
endif
%s/\s\+$//e
endfun

autocmd BufWritePre * call StripTrailingWhitespace()

" Return to last edit position when openind files (You want this!)
autocmd BufReadPost *
 \ if line("'\"") > 0 && line("'\"") <= line("$") |
 \   exe "normal! g`\"" |
 \ endif

" Searching
set incsearch  " incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " ... unless they contain at least one capital letter
set gdefault   " Use 'g' flag by default with :s/foo/bar/

" Always set cursor to first line when committing to git
autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrl-P
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildignore+=*/tmp/**,*.scssc,*.sassc,*compiled*
let g:ctrlp_custom_ignore = '.*\(node_modules\|build\|bower_components\).*'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

nnoremap <leader><leader> <c-^>
nnoremap <Leader>hs :set hlsearch!<cr>
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>m :NERDTreeFind<CR>
nnoremap <leader>N :set relativenumber!<cr> :set number!<cr>

"(un)indent lines without leaving visual mode
vmap > >1v
vmap < <1v

" Make Y behave like D or C, instead of dd or yy
nnoremap Y y$

"save & quit & reload faster
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>x :x<CR>

" browse to the current line on Github
  " on current branch
  nnoremap <leader>o :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>
  " in creating commit
  nnoremap <leader>O :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" allow copying to system clipboard. May work in tandem with tmux
" https://github.com/lmarburger/dotfiles/blob/master/tmux.conf#L8-L13
set clipboard=unnamed

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors!
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=16 " only use 16 colors, not 256
highlight LineNR ctermfg=238
highlight Visual term=reverse cterm=reverse ctermbg=NONE
hi Comment cterm=italic
" highlight clear SpellBad
" highlight clear SpellCap
" highlight SpellBad cterm=underline
" highlight SpellBad ctermfg=9
" highlight SpellCap cterm=underline
" highlight SpellCap ctermfg=6

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeShowHidden=1
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeWildIgnore=0

function! ShowRoutes()
" " Requires 'scratch' plugin
" :topleft 100 :split __Routes__
" " Make sure Vim doesn't write __Routes__ as a file
" :set buftype=nofile
" " Delete everything
" :normal 1GdG
" " Put routes output in buffer
" :0r! rake -s routes
" " Size window to number of lines (1 plus rake output length)
" :exec ":normal " . line("$") . "_ "
" " Move cursor to bottom
" :normal 1GG
" " Delete empty trailing line
" :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>

let g:pencil#wrapModeDefault = 'soft'
augroup pencil
" autocmd!
" autocmd FileType markdown call pencil#init()
" autocmd FileType textile call pencil#init()
" autocmd FileType text call pencil#init({'wrap': 'hard'})
augroup END
nmap <leader>p :TogglePencil<cr>

nmap <leader>c :set spell!<cr>
" breaks <c-i>!
" nnoremap <Tab> ]s
" nnoremap <right> z=

" turn off Ex mode!
:nnoremap Q <Nop>
:nnoremap qQ <Nop>

" rubocop
let g:vimrubocop_config = '/Users/chadoh/.rubocop.yml'

" rust
autocmd Filetype rust setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" persistent undo
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif"

autocmd BufNewFile,BufRead *.prisma set filetype=graphql
autocmd BufWritePost *.prisma !prisma deploy
