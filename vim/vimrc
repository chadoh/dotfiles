set shell=/bin/bash
set nocompatible                " choose no compatibility with legacy vi
set encoding=utf-8
filetype off
set mouse=a
let mapleader=" "


" terminal vim sucks at pasting; press F2 to toggle making it better
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'epmatsw/ag.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tomtom/tlib_vim'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle "garbas/vim-snipmate"
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'nono/vim-handlebars'
Bundle 'tpope/vim-rails'
Bundle 'skalnik/vim-vroom'
Bundle 'tpope/vim-bundler'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-git'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'edsono/vim-matchit'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'vim-scripts/slimv.vim'
Bundle 'dart-lang/dart-vim-plugin'
Bundle 'vim-scripts/scratch.vim'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'Townk/vim-autoclose'
Bundle 'tpope/vim-endwise'
Bundle 'vim-scripts/vim-pencil'
Bundle 'elixir-lang/vim-elixir'
Bundle 'mxw/vim-jsx'
Bundle 'slim-template/vim-slim'
Bundle 'pangloss/vim-javascript'


filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256 " 256 colors
colorscheme default

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable

" Don't show current mode b/c we have powerline
set noshowmode
set laststatus=2
nnoremap <leader>s :set laststatus=0 showmode<cr>
nnoremap <leader>S :set laststatus=2 noshowmode<cr>

set showmatch
set showcmd                     " display incomplete commands
set ruler
set relativenumber
set number
set wildmenu
set wildmode=longest,list
set visualbell
set splitright
set splitbelow

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent

nnoremap <leader><cr> :set wrap! linebreak!<cr>

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Set ex history higher
set history=1000

" Preseve undo across sessions
if exists("&undodir")
  set undodir=~/.vim-tmp/undo/
  set undofile
endif

" Resize splits when the window is resized
au VimResized * :wincmd =

" Remove trailing whitespace from files on save
" (except files with "b:noStripWhitespace=1" (only markdown by default))
fun! StripTrailingWhitespace()
    " Don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
endfun

autocmd BufWritePre * call StripTrailingWhitespace()

" Return to last edit position when openind files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Searching
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" Always set cursor to first line when committing to git
autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])

" Set filetype to JS for *.es6 files
autocmd BufRead,BufNewFile *.es6 setfiletype javascript

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrl-P
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ignore Rubinius, Sass cache files
set wildignore+=*/tmp/**,*.scssc,*.sassc,*compiled*
let g:ctrlp_custom_ignore = '.*\(node_modules\|build\|bower_components\).*'
" let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vroom
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vroom_spec_command="rspec -f d"
map <Leader>r :VroomRunTestFile<CR>
map <Leader>e :VroomRunNearestTest<CR>

" simpler custom "vroom"
nmap <leader>t :w<cr>\|:!time bin/rake test<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>m :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

nnoremap <leader><leader> <c-^>
map <Leader>f :Ag<space>
map <Leader>F :AgFromSearch<CR>
nnoremap <Leader>hs :set hlsearch!<cr>
map <Leader>n :NERDTreeToggle<CR>
nnoremap <leader>N :set relativenumber!<cr> :set number!<cr>


"create newline using Enter or \ without entering insert mode
nmap \ O<Esc>
nmap <CR> o<Esc>

"(un)indent lines without leaving visual mode
vmap > >1v
vmap < <1v
vmap <Tab> >
vmap <C-Tab> <

" Make Y behave like D or C, instead of dd or yy
nnoremap Y y$

"save & quit & reload faster
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>x :x<CR>

" browse to the current line on Github
nnoremap <leader>o :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" allow copying to system clipboard. May work in tandem with tmux
" https://github.com/lmarburger/dotfiles/blob/master/tmux.conf#L8-L13
set clipboard=unnamed

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color stuff b/c it doesn't work after setting the colorscheme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight LineNR ctermfg=238
highlight Visual term=none cterm=none ctermbg=240
" highlight Comment ctermfg=238 " only works with dark backgrounds
highlight Search ctermfg=234 ctermbg=222
" highlight CursorLine term=none cterm=none ctermbg=236 " sucks on most color schemes
" highlight CursorLine term=none cterm=none " this makes Ag plugin suck
highlight String ctermfg=12
highlight Constant ctermfg=13
hi clear SpellBad
hi clear SpellCap
hi SpellBad cterm=underline
hi SpellBad ctermfg=9
hi SpellCap cterm=underline
hi SpellCap ctermfg=6

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configure NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeWildIgnore=0

function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>

let g:pencil#wrapModeDefault = 'soft'
augroup pencil
  autocmd!
  autocmd FileType markdown call pencil#init()
  autocmd FileType textile call pencil#init()
  autocmd FileType text call pencil#init({'wrap': 'hard'})
augroup END
nmap <leader>p :TogglePencil<cr>

nmap <leader>c :set spell!<cr>
" breaks <c-i>!
" nnoremap <Tab> ]s
" nnoremap <right> z=

" turn off Ex mode!
:nnoremap Q <Nop>
:nnoremap qQ <Nop>
